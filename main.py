# –∏–º–ø–æ—Ä—Ç—ã
import telebot
from telebot import types
import sqlite3
from config import *
from time import sleep

# —Å–æ–∑–¥–∞–Ω–∏–µ –±–¥
db = sqlite3.connect('database.db', check_same_thread=False)
cursor = db.cursor()

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users(
    id INTEGER,
    login TEXT,
    password TEXT
)""")

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
bot = telebot.TeleBot(bot_token)


@bot.message_handler(commands=['start'])
def start(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    usrid = message.chat.id
    user_select = cursor.execute(f"SELECT id FROM users WHERE id =  {usrid}").fetchone()
    if user_select is None:
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO users VALUES (?, ?, ?)", (usrid, "none", "none"))
        db.commit()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, hello_text)
        msg = bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–ø–æ—á—Ç—É –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–ù–µ –±–æ–π—Ç–µ—Å—å —ç—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ)")
        print('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        bot.register_next_step_handler(msg, reg_login)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n –ù–∞–ø–∏—à–∏—Ç–µ /connect —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
def reg_login(message):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    usr_login = message.text
    usrid = message.chat.id
    cursor.execute(f"UPDATE users SET login = ? WHERE id = {usrid}", (usr_login, )) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
    print(f"{usrid} | Login: {usr_login}")
    bot.register_next_step_handler(msg, reg_password)
    db.commit()

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def reg_password(message):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    usr_password = message.text
    usrid = message.chat.id
    cursor.execute(f"UPDATE users SET password = ? WHERE id = {usrid}", (usr_password, )) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! \n –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Å—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–∞—é –≤–≤–µ–¥–∏—Ç–µ /connect")
    print(f"{usrid} | Password {usr_password}")
    db.commit()


@bot.message_handler(commands=['connect'])
def connect(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ id –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")

@bot.message_handler(func=lambda message: message.text == vote_id)
def connecting(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—Å–æ–µ–¥–µ–Ω—è–µ–º –≤–∞—Å –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω—é –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    sleep(2)
    kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=1, resize_keyboard=True) # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 1")
    btn2 = types.KeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 2")
    btn3 = types.KeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 3")
    btn4 = types.KeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 4")
    kb.add(btn1, btn2, btn3, btn4) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    file = open('voting_users.jpg', 'rb') # –¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–µ (–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
    bot.send_photo(message.chat.id, file, f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 1: {participant1[0]} {participant1[1]} –ì–æ–ª–æ—Å–æ–≤: {participant1[2]} \n üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 2: {participant2[0]} {participant2[1]} –ì–æ–ª–æ—Å–æ–≤: {participant2[2]} \n üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 3: {participant3[0]} {participant3[1]} –ì–æ–ª–æ—Å–æ–≤: {participant3[2]} \n üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 4: {participant4[0]} {participant4[1]} –ì–æ–ª–æ—Å–æ–≤: {participant4[2]} \n –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", reply_markup=kb)

@bot.message_handler(func= lambda message: message.text == '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 1')
def golos1 (message):
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    types.ReplyKeyboardRemove()

@bot.message_handler(func= lambda message: message.text == '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 2')
def golos2 (message):
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    types.ReplyKeyboardRemove()

@bot.message_handler(func= lambda message: message.text == '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 3')
def golos3 (message):
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    types.ReplyKeyboardRemove()

@bot.message_handler(func= lambda message: message.text == '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ 4')
def golos4 (message):
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    types.ReplyKeyboardRemove()

@bot.message_handler(commands=['a_send'])
def a_send (message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ chat id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.register_next_step_handler(msg, asend)

def asend (message):
    chi = message.text
    bot.send_message(chi, "–ü—Ä–∏—à–ª–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Ä–æ–±–æ—Ç–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –≤–∞–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /captcha")

@bot.message_handler(commands=['captcha'])
def captcha1 (message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥")
    bot.register_next_step_handler(msg, captcha2)

def captcha2 (message):
    bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç")
    print(f"{message.chat.id} | Code: {message.text}")

bot.polling(none_stop=True)